// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: productes.sql

package db

import (
	"context"
)

const createProducte = `-- name: CreateProducte :one
INSERT INTO productes (
    catalog_id, name, price,view,
    content,discount,image_link,image_list
) VALUES (
             $1,$2,$3,$4,$5,$6,$7,$8
         )
RETURNING id, catalog_id, name, price, view, content, discount, image_link, image_list, created_at
`

type CreateProducteParams struct {
	CatalogID int64  `json:"catalog_id"`
	Name      string `json:"name"`
	Price     int64  `json:"price"`
	View      int64  `json:"view"`
	Content   string `json:"content"`
	Discount  string `json:"discount"`
	ImageLink string `json:"image_link"`
	ImageList string `json:"image_list"`
}

func (q *Queries) CreateProducte(ctx context.Context, arg CreateProducteParams) (Producte, error) {
	row := q.db.QueryRowContext(ctx, createProducte,
		arg.CatalogID,
		arg.Name,
		arg.Price,
		arg.View,
		arg.Content,
		arg.Discount,
		arg.ImageLink,
		arg.ImageList,
	)
	var i Producte
	err := row.Scan(
		&i.ID,
		&i.CatalogID,
		&i.Name,
		&i.Price,
		&i.View,
		&i.Content,
		&i.Discount,
		&i.ImageLink,
		&i.ImageList,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductes = `-- name: DeleteProductes :exec
DELETE FROM productes WHERE id = $1
`

func (q *Queries) DeleteProductes(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductes, id)
	return err
}

const getProducte = `-- name: GetProducte :one
SELECT id, catalog_id, name, price, view, content, discount, image_link, image_list, created_at FROM productes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProducte(ctx context.Context, id int64) (Producte, error) {
	row := q.db.QueryRowContext(ctx, getProducte, id)
	var i Producte
	err := row.Scan(
		&i.ID,
		&i.CatalogID,
		&i.Name,
		&i.Price,
		&i.View,
		&i.Content,
		&i.Discount,
		&i.ImageLink,
		&i.ImageList,
		&i.CreatedAt,
	)
	return i, err
}

const getProductesForUpdate = `-- name: GetProductesForUpdate :one
SELECT id, catalog_id, name, price, view, content, discount, image_link, image_list, created_at FROM productes
WHERE id = $1 LIMIT 1
    FOR NO KEY UPDATE
`

func (q *Queries) GetProductesForUpdate(ctx context.Context, id int64) (Producte, error) {
	row := q.db.QueryRowContext(ctx, getProductesForUpdate, id)
	var i Producte
	err := row.Scan(
		&i.ID,
		&i.CatalogID,
		&i.Name,
		&i.Price,
		&i.View,
		&i.Content,
		&i.Discount,
		&i.ImageLink,
		&i.ImageList,
		&i.CreatedAt,
	)
	return i, err
}

const listProductes = `-- name: ListProductes :many
SELECT id, catalog_id, name, price, view, content, discount, image_link, image_list, created_at FROM productes
WHERE name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductesParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListProductes(ctx context.Context, arg ListProductesParams) ([]Producte, error) {
	rows, err := q.db.QueryContext(ctx, listProductes, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Producte{}
	for rows.Next() {
		var i Producte
		if err := rows.Scan(
			&i.ID,
			&i.CatalogID,
			&i.Name,
			&i.Price,
			&i.View,
			&i.Content,
			&i.Discount,
			&i.ImageLink,
			&i.ImageList,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductes = `-- name: UpdateProductes :one
UPDATE productes
SET catalog_id = $2,
    price = $3,
    view = $4,
    discount = $5
WHERE id = $1
RETURNING id, catalog_id, name, price, view, content, discount, image_link, image_list, created_at
`

type UpdateProductesParams struct {
	ID        int64  `json:"id"`
	CatalogID int64  `json:"catalog_id"`
	Price     int64  `json:"price"`
	View      int64  `json:"view"`
	Discount  string `json:"discount"`
}

func (q *Queries) UpdateProductes(ctx context.Context, arg UpdateProductesParams) (Producte, error) {
	row := q.db.QueryRowContext(ctx, updateProductes,
		arg.ID,
		arg.CatalogID,
		arg.Price,
		arg.View,
		arg.Discount,
	)
	var i Producte
	err := row.Scan(
		&i.ID,
		&i.CatalogID,
		&i.Name,
		&i.Price,
		&i.View,
		&i.Content,
		&i.Discount,
		&i.ImageLink,
		&i.ImageList,
		&i.CreatedAt,
	)
	return i, err
}
