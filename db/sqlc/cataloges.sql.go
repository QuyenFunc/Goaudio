// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cataloges.sql

package db

import (
	"context"
)

const createCatalog = `-- name: CreateCatalog :one
INSERT INTO cataloges (
    name, parent_id, sort_order
) VALUES (
             $1,$2,$3
         )
RETURNING id, name, parent_id, sort_order
`

type CreateCatalogParams struct {
	Name      string `json:"name"`
	ParentID  int64  `json:"parent_id"`
	SortOrder int16  `json:"sort_order"`
}

func (q *Queries) CreateCatalog(ctx context.Context, arg CreateCatalogParams) (Cataloge, error) {
	row := q.db.QueryRowContext(ctx, createCatalog, arg.Name, arg.ParentID, arg.SortOrder)
	var i Cataloge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SortOrder,
	)
	return i, err
}

const getCatalog = `-- name: GetCatalog :one
SELECT id, name, parent_id, sort_order FROM cataloges
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCatalog(ctx context.Context, id int64) (Cataloge, error) {
	row := q.db.QueryRowContext(ctx, getCatalog, id)
	var i Cataloge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SortOrder,
	)
	return i, err
}

const getCatalogesForUpdate = `-- name: GetCatalogesForUpdate :one
SELECT id, name, parent_id, sort_order FROM cataloges
WHERE id = $1 LIMIT 1
    FOR NO KEY UPDATE
`

func (q *Queries) GetCatalogesForUpdate(ctx context.Context, id int64) (Cataloge, error) {
	row := q.db.QueryRowContext(ctx, getCatalogesForUpdate, id)
	var i Cataloge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SortOrder,
	)
	return i, err
}

const updateCatalog = `-- name: UpdateCatalog :one
UPDATE cataloges
SET sort_order = $2
WHERE id = $1
RETURNING id, name, parent_id, sort_order
`

type UpdateCatalogParams struct {
	ID        int64 `json:"id"`
	SortOrder int16 `json:"sort_order"`
}

func (q *Queries) UpdateCatalog(ctx context.Context, arg UpdateCatalogParams) (Cataloge, error) {
	row := q.db.QueryRowContext(ctx, updateCatalog, arg.ID, arg.SortOrder)
	var i Cataloge
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.SortOrder,
	)
	return i, err
}
