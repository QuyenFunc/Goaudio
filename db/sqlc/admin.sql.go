// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO Admin (
    username, password, name
) VALUES (
             $1,$2,$3
         )
RETURNING id, username, password, name
`

type CreateAdminParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Username, arg.Password, arg.Name)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM Admin WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, username, password, name FROM Admin
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, id int32) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
	)
	return i, err
}
