// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/QuyenFunc/Goaudio/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/QuyenFunc/Goaudio/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(arg0 context.Context, arg1 db.CreateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), arg0, arg1)
}

// CreateCatalog mocks base method.
func (m *MockStore) CreateCatalog(arg0 context.Context, arg1 db.CreateCatalogParams) (db.Cataloge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCatalog", arg0, arg1)
	ret0, _ := ret[0].(db.Cataloge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCatalog indicates an expected call of CreateCatalog.
func (mr *MockStoreMockRecorder) CreateCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCatalog", reflect.TypeOf((*MockStore)(nil).CreateCatalog), arg0, arg1)
}

// CreateProducte mocks base method.
func (m *MockStore) CreateProducte(arg0 context.Context, arg1 db.CreateProducteParams) (db.Producte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducte", arg0, arg1)
	ret0, _ := ret[0].(db.Producte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducte indicates an expected call of CreateProducte.
func (mr *MockStoreMockRecorder) CreateProducte(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducte", reflect.TypeOf((*MockStore)(nil).CreateProducte), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAdmin mocks base method.
func (m *MockStore) DeleteAdmin(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockStoreMockRecorder) DeleteAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockStore)(nil).DeleteAdmin), arg0, arg1)
}

// DeleteProductes mocks base method.
func (m *MockStore) DeleteProductes(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductes indicates an expected call of DeleteProductes.
func (mr *MockStoreMockRecorder) DeleteProductes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductes", reflect.TypeOf((*MockStore)(nil).DeleteProductes), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(arg0 context.Context, arg1 int64) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), arg0, arg1)
}

// GetCatalog mocks base method.
func (m *MockStore) GetCatalog(arg0 context.Context, arg1 int64) (db.Cataloge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalog", arg0, arg1)
	ret0, _ := ret[0].(db.Cataloge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalog indicates an expected call of GetCatalog.
func (mr *MockStoreMockRecorder) GetCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalog", reflect.TypeOf((*MockStore)(nil).GetCatalog), arg0, arg1)
}

// GetCatalogesForUpdate mocks base method.
func (m *MockStore) GetCatalogesForUpdate(arg0 context.Context, arg1 int64) (db.Cataloge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogesForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Cataloge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogesForUpdate indicates an expected call of GetCatalogesForUpdate.
func (mr *MockStoreMockRecorder) GetCatalogesForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogesForUpdate", reflect.TypeOf((*MockStore)(nil).GetCatalogesForUpdate), arg0, arg1)
}

// GetProducte mocks base method.
func (m *MockStore) GetProducte(arg0 context.Context, arg1 int64) (db.Producte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducte", arg0, arg1)
	ret0, _ := ret[0].(db.Producte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducte indicates an expected call of GetProducte.
func (mr *MockStoreMockRecorder) GetProducte(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducte", reflect.TypeOf((*MockStore)(nil).GetProducte), arg0, arg1)
}

// GetProductesForUpdate mocks base method.
func (m *MockStore) GetProductesForUpdate(arg0 context.Context, arg1 int64) (db.Producte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductesForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Producte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductesForUpdate indicates an expected call of GetProductesForUpdate.
func (mr *MockStoreMockRecorder) GetProductesForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductesForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductesForUpdate), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListProductes mocks base method.
func (m *MockStore) ListProductes(arg0 context.Context, arg1 db.ListProductesParams) ([]db.Producte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductes", arg0, arg1)
	ret0, _ := ret[0].([]db.Producte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductes indicates an expected call of ListProductes.
func (mr *MockStoreMockRecorder) ListProductes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductes", reflect.TypeOf((*MockStore)(nil).ListProductes), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateCatalog mocks base method.
func (m *MockStore) UpdateCatalog(arg0 context.Context, arg1 db.UpdateCatalogParams) (db.Cataloge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCatalog", arg0, arg1)
	ret0, _ := ret[0].(db.Cataloge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCatalog indicates an expected call of UpdateCatalog.
func (mr *MockStoreMockRecorder) UpdateCatalog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCatalog", reflect.TypeOf((*MockStore)(nil).UpdateCatalog), arg0, arg1)
}

// UpdateProductes mocks base method.
func (m *MockStore) UpdateProductes(arg0 context.Context, arg1 db.UpdateProductesParams) (db.Producte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductes", arg0, arg1)
	ret0, _ := ret[0].(db.Producte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductes indicates an expected call of UpdateProductes.
func (mr *MockStoreMockRecorder) UpdateProductes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductes", reflect.TypeOf((*MockStore)(nil).UpdateProductes), arg0, arg1)
}
